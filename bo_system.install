<?php

use Drupal\bo_system\Upgrader\UpgradeConfig;
use Drupal\commerce_promotion\Entity\Promotion;

/**
 * Implementa hook_schema().
 */
function bo_system_schema() {
  $schema['bo_system_events'] = [
    'description' => 'Traccia eventi per operazioni custom.',
    'fields' => [
      'nid' => [
        'description' => 'ID del nodo evento.',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'start_date' => [
        'description' => 'Data inizio evento.',
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
      ],
      'end_date' => [
        'description' => 'Data fine evento.',
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
      ],
      'review_notification_sent' => [
        'description' => 'Timestamp invio notifica review (0 se non inviata).',
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE,
      ],
    ],
    'primary key' => ['nid'],
  ];

  return $schema;
}

/**
 * Implements hook_install().
 */
function bo_system_install() {
  // Crea il campo `field_first_name`.
  \Drupal::service('entity_type.manager')
    ->getStorage('field_storage_config')
    ->create([
      'field_name' => 'field_first_name',
      'entity_type' => 'user',
      'type' => 'string',
      'settings' => [
        'max_length' => 255,
      ],
      'cardinality' => 1,
      'translatable' => TRUE,
      'locked' => FALSE,
    ])
    ->save();

  // Aggiungi il campo `field_first_name` all'entità `user`.
  \Drupal::service('entity_type.manager')
    ->getStorage('field_config')
    ->create([
      'field_name' => 'field_first_name',
      'entity_type' => 'user',
      'bundle' => 'user',
      'label' => t('First name'),
      'description' => t('The first name of the user.'),
      'required' => TRUE,
      'settings' => [
        'default_value' => '',
      ],
      'translatable' => TRUE,
    ])
    ->save();

  // Crea il campo `field_last_name`.
  \Drupal::service('entity_type.manager')
    ->getStorage('field_storage_config')
    ->create([
      'field_name' => 'field_last_name',
      'entity_type' => 'user',
      'type' => 'string',
      'settings' => [
        'max_length' => 255,
      ],
      'cardinality' => 1,
      'translatable' => TRUE,
      'locked' => FALSE,
    ])
    ->save();

  // Aggiungi il campo `field_last_name` all'entità `user`.
  \Drupal::service('entity_type.manager')
    ->getStorage('field_config')
    ->create([
      'field_name' => 'field_last_name',
      'entity_type' => 'user',
      'bundle' => 'user',
      'label' => t('Last name'),
      'description' => t('The last name of the user.'),
      'required' => TRUE,
      'settings' => [
        'default_value' => '',
      ],
      'translatable' => TRUE,
    ])
    ->save();

    _bo_system_import_optional_views();

    _create_bo_promotions();

}

/**
 * Funzione personalizzata per importare le configurazioni opzionali.
 */
function _bo_system_import_optional_views() {
  // Ottieni il percorso del modulo utilizzando il servizio extension.list.module.
  $module_path = \Drupal::service('extension.list.module')->getPath('bo_system');
  // Percorso della configurazione opzionale.
  $configs = [];

  $configs[] = 'views.view.booking_events_manage';
  $configs[] = 'views.view.bookings';
  $configs[] = 'views.view.change_booking_details';

  foreach ($configs as $config) {

    $config_path = $module_path . '/config/optional/' . $config . '.yml';
    // Verifica se il file esiste.
    if (file_exists($config_path)) {
      $config_path = 'modules/contrib/bo_system/config/optional/views.view.booking_events_manage.yml';
      // Importa il file di configurazione della vista.
      $config_data = \Drupal::service('config.storage.sync')->read($config_path);

      if (!$config_data) {
        $configsToUpdate = [
          'bo_system/optional' => [
            $config
          ],
        ];
        UpgradeConfig::updateConfigs($configsToUpdate);
      }
      else {
        \Drupal::configFactory()->getEditable($config)->setData($config_data)->save();
      }
      // Messaggio di conferma.
      \Drupal::messenger()->addMessage(t('La configurazione ' . $config . ' è stata importata con successo.'));
    } else {
      // Messaggio di errore se il file non esiste.
      \Drupal::messenger()->addError(t('Il file di configurazione per ' . $config . ' non è stato trovato.'));
    }
  }
}

/*
  // Esempio cancellazione configurazione.
  $configFactory = \Drupal::configFactory();
  $configFactory
    ->getEditable('field.field.node.ita_luogo_interesse_pubblico.field_ita_orario_pubblico_note')
    ->delete();
  $configFactory
    ->getEditable('field.storage.node.field_ita_orario_pubblico_note')
    ->delete();


  // Esempio creazione field.
  $configsForCreateFields = [
    'bo_system' => [
      [
        'config' => 'field.field.node.bookable_unit.field_machine_name',
        'storage' => 'field.storage.node.field_machine_name',
      ],
    ],
  ];
  UpgradeConfig::createNewFields($configsForCreateFields);


  // Esempio rilettura configurazioni.
  $configsToUpdate = [
    'bo_system' => [
      'core.entity_form_display.taxonomy_term.ita_tipi_punti_contatto.default',
      'core.entity_view_display.node.ita_luogo_interesse_pubblico.indirizzo_uo',
    ],
  ];
  UpgradeConfig::updateConfigs($configsToUpdate);

*/

function _create_bo_promotions() {
  // Creazione della promozione DISCOUNT.
  $promotion = Promotion::create([
    'name' => 'Pay online discount',
    'display_name' => 'Pay online discount',
    'status' => TRUE, // Attiva la promozione.
    'offer' => [
      'target_plugin_id' => 'order_percentage_off', // Tipo di sconto.
      'target_plugin_configuration' => [
        'percentage' => '0.1', // Sconto del 10%.
      ],
    ],
    'order_types' => [
      ['target_id' => 'booking'], // Applica la promozione solo agli ordini di tipo "booking".
    ],
    'conditions' => [
      [
        'target_plugin_id' => 'bo_inperson_online_payment_discount', // Plugin condizione personalizzato.
        'target_plugin_configuration' => [],
      ],
    ],
    'condition_operator' => 'AND', // Operatore per combinare le condizioni.
  ]);

  // Salva la promozione.
  $promotion->save();

  // Creazione della promozione DISCOUNT.
  $promotion = Promotion::create([
    'name' => 'Full discount',
    'display_name' => 'Full discount',
    'status' => TRUE, // Attiva la promozione.
    'offer' => [
      'target_plugin_id' => 'order_percentage_off', // Tipo di sconto.
      'target_plugin_configuration' => [
        'percentage' => '1', // Sconto del 100%.
      ],
    ],
    'order_types' => [
      ['target_id' => 'booking'], // Applica la promozione solo agli ordini di tipo "booking".
    ],
    'conditions' => [
      [
        'target_plugin_id' => 'bo_free_checkout', // Plugin condizione personalizzato.
        'target_plugin_configuration' => [],
      ],
    ],
    'condition_operator' => 'AND', // Operatore per combinare le condizioni.
  ]);

  // Salva la promozione.
  $promotion->save();
}

/**
 * Add services.
 */
function bo_system_update_10001() {

  $configsToUpdate = [
    'bo_system' => [
      'paragraphs.paragraphs_type.service',
      'taxonomy.vocabulary.service'
    ],
  ];
  UpgradeConfig::updateConfigs($configsToUpdate);


  $configsForCreateFields = [
    'bo_system' => [
      [
        'config' => 'field.field.paragraph.service.field_percentage',
        'storage' => 'field.storage.paragraph.field_percentage',
      ],
      [
        'config' => 'field.field.node.event.field_services',
        'storage' => 'field.storage.node.field_services',
      ],
      [
        'config' => 'field.field.node.bookable_entity.field_services',
        'storage' => 'field.storage.node.field_services',
      ],
      [
        'config' => 'field.field.commerce_order_item.booking.field_services',
        'storage' => 'field.storage.commerce_order_item.field_services',
      ],
      [
        'config' => 'field.field.paragraph.service.field_service',
        'storage' => 'field.storage.paragraph.field_service',
      ],
    ],
  ];
  UpgradeConfig::createNewFields($configsForCreateFields);


  $configsToUpdate = [
    'bo_system' => [
      'core.entity_view_display.paragraph.service.default',
      'core.entity_form_display.paragraph.service.default',
      'core.entity_view_display.commerce_order_item.booking.default',
      'core.entity_form_display.commerce_order_item.booking.default',
      'core.entity_form_display.commerce_order_item.booking.add_to_cart',
      'core.entity_form_display.node.bookable_entity.default',
      'core.entity_form_display.node.event.default',
    ],
  ];
  UpgradeConfig::updateConfigs($configsToUpdate);

}

/**
 * Add promotions for Full discount.
 */
function bo_system_update_10002() {
  $configsForCreateFields = [
    'bo_system' => [
      [
        'config' => 'field.field.commerce_order_item.booking.field_promotion',
        'storage' => 'field.storage.commerce_order_item.field_promotion',
      ],
    ],
  ];
  UpgradeConfig::createNewFields($configsForCreateFields);



  \Drupal::service('module_installer')->install(['commerce_promotion']);
  _create_bo_promotions();
}

/**
 * Update views
 */
function bo_system_update_10003() {
  _bo_system_import_optional_views();
}

/**
 * Crea la tabella bo_system_events se non esiste.
 */
function bo_system_update_10004() {
  $schema = \Drupal::database()->schema();

  if (!$schema->tableExists('bo_system_events')) {
    $schema->createTable('bo_system_events', [
      'description' => 'Traccia eventi e stato notifica review.',
      'fields' => [
        'nid' => [
          'description' => 'ID del nodo evento.',
          'type' => 'int',
          'not null' => TRUE,
        ],
        'start_date' => [
          'description' => 'Data inizio evento.',
          'type' => 'varchar',
          'length' => 20,
          'not null' => TRUE,
        ],
        'end_date' => [
          'description' => 'Data fine evento.',
          'type' => 'varchar',
          'length' => 20,
          'not null' => TRUE,
        ],
        'review_notification_sent' => [
          'description' => 'Timestamp invio notifica review (0 se non inviata).',
          'type' => 'int',
          'default' => 0,
          'not null' => TRUE,
        ],
      ],
      'primary key' => ['nid'],
    ]);
  }
}

/**
 * Add services.
 */
function bo_system_update_10005() {


  $configsForCreateFields = [
    'bo_system' => [
      [
        'config' => 'field.field.node.event.field_event_link',
        'storage' => 'field.storage.node.field_event_link',
      ],
    ],
  ];
  UpgradeConfig::createNewFields($configsForCreateFields);


  $configsToUpdate = [
    'bo_system' => [
      'core.entity_form_display.node.event.default',
      'core.entity_view_display.node.event.default',
      'core.entity_view_display.node.event.teaser',
    ],
  ];
  UpgradeConfig::updateConfigs($configsToUpdate);

}